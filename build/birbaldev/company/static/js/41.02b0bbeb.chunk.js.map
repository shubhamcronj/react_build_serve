{"version":3,"sources":["containers/JD/AddJD.js","components/Atoms/AutoComplete.js","components/Atoms/CustomizedInputs/CustomizedInputs.js","components/DatePicker/Datepicker.js"],"names":["optionsValue","regex","config","readonly","height","AddJD","props","removeSkill","id","setState","skillArr","state","filter","item","handlemodal","jd","jdErr","isShowImportModal","skills","softskills","handleNoOfHire","e","noOfHire","parseInt","target","value","handleExperienceFrom","experienceFrom","handleExperienceTo","experienceTo","handleCloseSuccessModal","successmodelopen","onSelect","selectedList","selectedItem","showSkillErr","selectedValue","onRemove","removedItem","onSelect1","selectedList1","showsoftSkillErr","selectedValue1","onRemove1","handleUpdate","event","editorContent","DOMParser","desc","valiDateFields","validate","length","multipleInputVal","skillErr","optname","test","jobErr","hireErr","expfroErr","Number","expToErr","newEndDate","endDateErr","descErr","addJD","a","newStartDate","payload","title","description","numberOfPositions","startDate","moment","format","endDate","minExp","maxExp","JDAction","addJobDescriptionData","handleMutilpleSkills","renderValues","getTagProps","newVals","map","val","i","split","push","el","option","index","variant","label","jobtitle","optid","errormodelopen","job","softSkillErr","datepickerErr","options","Date","setDate","getDate","skill","name","this","JobDataAction","getSkillS","JobDataReducer","className","onClick","history","style","color","width","placeholder","onChange","ref","setStateeditor","onBlur","newContent","multiple","onKeyDown","renderTags","skillData","data","x","display","type","min","fontSize","isNoPast","date","minDate","nextProps","currentState","JobDescriptionReducer","isJobDescriptionAdded","React","Component","connect","FeatureReducer","dispatch","FeatureAction","bindActionCreators","Actions","JDActions","JobDataActions","withRouter","AutocompleteComp","size","freeSolo","disableClearable","onKeyPress","defaultValue","renderInput","params","InputProps","disableUnderline","useStyles","makeStyles","theme","root","flexWrap","fontFamily","input","textOverflow","CustomizedInputs","classes","icon","inputIcon","src","imageHeight","imageWidth","paddingLeft","marginRight","role","imageOnClick","labelName","htmlFor","noMargin","required","margin","deviceAddInput","error","font","inputProps","maxLength","helperText","textInput","startAdornment","disabled","key","preventDefault","MaterialUIPickers","utils","DateFnsUtils","disablePast","KeyboardButtonProps"],"mappings":"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","file":"static/js/41.02b0bbeb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Actions from \"../../store/Feature1/FeatureAction\";\r\nimport * as JDActions from \"../../store/JobDescription/JobDescriptionAction\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Card, Chip } from \"@material-ui/core\";\r\nimport Button from \"../../components/Controls/Button/Button\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./AddJD.css\";\r\nimport DatePicker from \"../../components/DatePicker/Datepicker\";\r\nimport * as JobDataActions from \"../../store/JobData/JobDataAction\";\r\nimport Autocomplete from \"../../components/Atoms/AutoComplete\";\r\nimport moment from \"moment\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport CustomizedInputs from \"../../components/Atoms/CustomizedInputs/CustomizedInputs\";\r\nlet optionsValue = [];\r\n\r\nlet regex = /^.*[a-zA-Z]+.*$/;\r\nconst config = {\r\n  readonly: false,\r\n  height: 300,\r\n};\r\n\r\nclass AddJD extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jobtitle: [],\r\n      optid: \"\",\r\n      optname: \"\",\r\n      successmodelopen: false,\r\n      errormodelopen: false,\r\n      job: \"\",\r\n      skills: true,\r\n      softskills: false,\r\n      skillErr: \"\",\r\n      softSkillErr: \"\",\r\n      jobErr: \"\",\r\n      hireErr: \"\",\r\n      expfroErr: \"\",\r\n      expToErr: \"\",\r\n      endDateErr: \"\",\r\n      datepickerErr: \"\",\r\n      descErr: \"\",\r\n      options: [],\r\n      noOfHire: 0,\r\n      experienceFrom: 0,\r\n      experienceTo: 0,\r\n      newStartDate: new Date(),\r\n      newEndDate: new Date().setDate(new Date().getDate() + 7),\r\n      // newStartDate: moment().format(\"DD-MMM-YYYY\"),\r\n      // newEndDate: moment().add(7, \"d\").format(\"DD-MMM-YYYY\"),\r\n      desc: \"\",\r\n      multipleInputVal: \"\",\r\n      skillArr: [\r\n        { id: 1, skill: \"Java\" },\r\n        { id: 2, skill: \"Javascript\" },\r\n        { id: 3, skill: \"Android\" },\r\n        { id: 4, skill: \"Python\" },\r\n      ],\r\n      skills: [\"Java\", \"Javascript\", \"Android\", \"Python\"],\r\n\r\n      mulitSelectOptions: [\r\n        { id: 1, name: \"Java\" },\r\n        { id: 2, name: \"Javascript\" },\r\n        { id: 3, name: \"Android\" },\r\n        { id: 4, name: \"Python\" },\r\n        { id: 5, name: \"React JS\" },\r\n        { id: 6, name: \"React Native\" },\r\n        { id: 7, name: \"Node JS\" },\r\n        { id: 8, name: \"Express\" },\r\n      ],\r\n      mulitSelectOptions1: [\r\n        { id: 1, name: \"Communication\" },\r\n        { id: 2, name: \"Adaptability\" },\r\n        { id: 3, name: \"Leadership\" },\r\n        { id: 4, name: \"Teamwork\" },\r\n        { id: 5, name: \"Time management\" },\r\n        { id: 6, name: \"Emotional Intelligence\" },\r\n        { id: 7, name: \"Organization\" },\r\n        { id: 8, name: \"Collaboration\" },\r\n        { id: 9, name: \"Time management\" },\r\n        { id: 10, name: \"Creativity\" },\r\n        { id: 11, name: \"Problem solving\" },\r\n        { id: 12, name: \"Decision making\" },\r\n      ],\r\n      selectedValue: [],\r\n      selectedValue1: [],\r\n      jobTitleList: [],\r\n      multipleSkills: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.JobDataAction.getSkillS();\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, currentState) {\r\n    if (\r\n      nextProps &&\r\n      nextProps.JobDescriptionReducer &&\r\n      nextProps.JobDescriptionReducer.isJobDescriptionAdded\r\n    ) {\r\n      nextProps.JobDescriptionReducer.isJobDescriptionAdded = false;\r\n\r\n      nextProps.history.push(\"/jd\");\r\n    }\r\n\r\n    return currentState;\r\n  }\r\n\r\n  removeSkill = (id) => {\r\n    this.setState({\r\n      skillArr: this.state.skillArr.filter((item) => item.id !== id),\r\n    });\r\n  };\r\n  handlemodal = () => {\r\n    if (this.state.jd === \"\") {\r\n      this.setState({ jdErr: \"Please Select Job Description\" });\r\n    } else {\r\n      this.setState({ jdErr: \"\", isShowImportModal: true });\r\n    }\r\n  };\r\n  skills = () => {\r\n    this.setState({ skills: true, softskills: false });\r\n  };\r\n\r\n  softskills = () => {\r\n    this.setState({ skills: false, softskills: true });\r\n  };\r\n\r\n  // handleJDSelect = (e, optionsdata) => {\r\n  //   if (e.target.value !== \"\") {\r\n  //     const data =\r\n  //       optionsdata &&\r\n  //       optionsdata.filter(\r\n  //         (x) => x.label.toLowerCase() === e.target.value.toLowerCase()\r\n  //       );\r\n  //     if (data.length > 0) {\r\n  //       this.setState({ optid: data[0].value, optname: data[0].label });\r\n  //     } else {\r\n  //       const candid = localStorage.getItem(\"id\");\r\n  //       const candemail = localStorage.getItem(\"email\");\r\n  //       const uniqueID = candemail + candid;\r\n  //       const jobtitle = e.target.value;\r\n  //       this.setState({ optname: e.target.value });\r\n\r\n  //       if (regex.test(e.target.value)) {\r\n  //         const payload = {\r\n  //           uniqueId: uniqueID,\r\n  //           userID: candid,\r\n  //           jobtitle: jobtitle,\r\n  //         };\r\n  //         this.props.JobDataAction.addJobData(payload);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   // else if (e.target.value !== \"\") {\r\n  //   //   this.setState({ optname: e.target.value });\r\n  //   //   const candid = localStorage.getItem(\"id\");\r\n  //   //   const candemail = localStorage.getItem(\"email\");\r\n  //   //   const uniqueID = candemail + candid;\r\n  //   //   const jobtitle = e.target.value;\r\n\r\n  //   //   const payload = {\r\n  //   //     uniqueId: uniqueID,\r\n  //   //     userID: candid,\r\n  //   //     jobtitle: jobtitle,\r\n  //   //   };\r\n  //   //   this.props.JobDataAction.addJobData(payload);\r\n  //   //   const payload1 = {\r\n  //   //     UserId: candid,\r\n  //   //   };\r\n  //   //   this.props.JDAction.getJobtitleData(payload1);\r\n  //   // }\r\n  // };\r\n\r\n  handleNoOfHire = (e) => {\r\n    this.setState({\r\n      noOfHire: parseInt(e.target.value),\r\n    });\r\n  };\r\n\r\n  handleExperienceFrom = (e) => {\r\n    this.setState({ experienceFrom: e.target.value });\r\n  };\r\n\r\n  handleExperienceTo = (e) => {\r\n    this.setState({ experienceTo: e.target.value });\r\n  };\r\n\r\n  handleCloseSuccessModal = () => {\r\n    this.setState({ successmodelopen: false });\r\n  };\r\n\r\n  onSelect = (selectedList, selectedItem) => {\r\n    this.setState({\r\n      showSkillErr: false,\r\n      selectedValue: selectedList,\r\n    });\r\n  };\r\n\r\n  onRemove = (selectedList, removedItem) => {\r\n    this.setState({\r\n      selectedValue: selectedList,\r\n    });\r\n  };\r\n\r\n  onSelect1 = (selectedList1, selectedItem) => {\r\n    this.setState({\r\n      showsoftSkillErr: false,\r\n      selectedValue1: selectedList1,\r\n    });\r\n  };\r\n\r\n  onRemove1 = (selectedList1, removedItem) => {\r\n    this.setState({\r\n      selectedValue1: selectedList1,\r\n    });\r\n  };\r\n  handleUpdate = (event) => {\r\n    const editorContent = event;\r\n    var parser = new DOMParser();\r\n\r\n    // var doc = parser.parseFromString(event, 'text/html');\r\n\r\n    this.setState({\r\n      desc: editorContent,\r\n    });\r\n  };\r\n\r\n  valiDateFields = () => {\r\n    let validate = true;\r\n    if (\r\n      optionsValue &&\r\n      optionsValue.length == 0 &&\r\n      this.state.multipleInputVal == \"\"\r\n    ) {\r\n      validate = false;\r\n      this.setState({ skillErr: \"Please enter skills *\", showSkillErr: true });\r\n    } else {\r\n      this.setState({ skillErr: \"\", showSkillErr: false });\r\n    }\r\n    if (this.state.optname === \"\" || !regex.test(this.state.optname)) {\r\n      validate = false;\r\n      if (this.state.optname == \"\") {\r\n        this.setState({ jobErr: \"Please enter job title *\" });\r\n      } else if (!regex.test(this.state.optname)) {\r\n        this.setState({\r\n          jobErr:\r\n            \"Job title should not contain only numeric or special characters*\",\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({ jobErr: \"\" });\r\n    }\r\n    if (this.state.noOfHire === \"\" || this.state.noOfHire < 0) {\r\n      validate = false;\r\n      this.setState({ hireErr: \"Enter valid no. people to hire *\" });\r\n    } else if (this.state.noOfHire == 0) {\r\n      validate = false;\r\n      this.setState({\r\n        hireErr: \"No. of hire can't be 0\",\r\n      });\r\n    } else {\r\n      this.setState({ hireErr: \"\" });\r\n    }\r\n\r\n    if (this.state.experienceFrom === \"\") {\r\n      validate = false;\r\n      this.setState({ expfroErr: \"Enter experience from *\" });\r\n    } else if (Number(this.state.experienceFrom) > 41) {\r\n      validate = false;\r\n      this.setState({ expfroErr: \"Experience should not exceed 40\" });\r\n    } else {\r\n      this.setState({ expfroErr: \"\" });\r\n    }\r\n    if (this.state.experienceTo === \"\") {\r\n      validate = false;\r\n      this.setState({ expToErr: \"Enter experience to *\" });\r\n    } else if (Number(this.state.experienceTo) > 41) {\r\n      validate = false;\r\n      this.setState({ expToErr: \"Experience should not exceed 40\" });\r\n    } else if (this.state.experienceTo < this.state.experienceFrom) {\r\n      validate = false;\r\n    } else {\r\n      this.setState({ expToErr: \"\" });\r\n    }\r\n    if (this.state.newEndDate === null) {\r\n      validate = false;\r\n\r\n      this.setState({ endDateErr: \"Enter end date *\" });\r\n    } else {\r\n      this.setState({ endDateErr: \"\" });\r\n    }\r\n\r\n    if (this.state.desc === \"\") {\r\n      validate = false;\r\n      this.setState({ descErr: \"Enter Job description *\" });\r\n    } else {\r\n      this.setState({ descErr: \"\" });\r\n    }\r\n\r\n    return validate;\r\n  };\r\n\r\n  addJD = async () => {\r\n    if (this.valiDateFields()) {\r\n      const {\r\n        experienceTo,\r\n        experienceFrom,\r\n        newEndDate,\r\n        newStartDate,\r\n        desc,\r\n        noOfHire,\r\n        optname,\r\n      } = this.state;\r\n\r\n      const payload = {\r\n        title: optname,\r\n        description: desc,\r\n        numberOfPositions: noOfHire,\r\n        startDate: moment(newStartDate).format(\"DD-MMM-YYYY\"),\r\n        endDate: moment(newEndDate).format(\"DD-MMM-YYYY\"),\r\n        skills: this.state.multipleInputVal\r\n          ? [...optionsValue, this.state.multipleInputVal]\r\n          : optionsValue,\r\n        minExp: experienceFrom,\r\n        maxExp: experienceTo,\r\n      };\r\n      this.props.JDAction.addJobDescriptionData(payload);\r\n    }\r\n  };\r\n  handleMutilpleSkills = (e) => {\r\n    this.setState({\r\n      multipleInputVal: e.target.value,\r\n    });\r\n  };\r\n  renderValues = (value, getTagProps) => {\r\n    optionsValue = value;\r\n    let newVals = [];\r\n    value.map((val) => {\r\n      let i = val.split(\",\");\r\n      i.length === 1 ? newVals.push(i[0]) : i.map((el) => newVals.push(el));\r\n    });\r\n    return newVals.map((option, index) => (\r\n      <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n    ));\r\n  };\r\n  render() {\r\n    const { JobDataReducer } = this.props;\r\n    return (\r\n      <Card className=\"addJdWrap\">\r\n        <div className=\"arrow-heading-wrapper\">\r\n          <div\r\n            className=\"arrow-div\"\r\n            onClick={() => {\r\n              this.props.history.push(\"/jd\");\r\n            }}\r\n          >\r\n            <ArrowBackIcon style={{ color: \"#21745D\", width: \"25px\" }} />\r\n          </div>\r\n\r\n          <div className=\"add-job\">Add Job Description</div>\r\n        </div>\r\n        <div className=\"bottom-div\">\r\n          <div className=\"addJdDropdownWrap\">\r\n            <div className=\"select-drop\" style={{ width: \"50%\" }}>\r\n              <CustomizedInputs\r\n                className={\"rs-search-master\"}\r\n                placeholder=\"Enter Job Title\"\r\n                value={this.state.optname}\r\n                onChange={(e) => {\r\n                  this.setState({ optname: e.target.value });\r\n                }}\r\n              />\r\n\r\n              {!this.state.optname && (\r\n                <p className=\"errorMsg\">{this.state.jobErr}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div className=\"addJdTextboxWrap\">\r\n            <div className=\"addJdDescLabel\">Job Description *</div>\r\n            <JoditEditor\r\n              ref={this.setStateeditor}\r\n              value={this.state.desc}\r\n              config={config}\r\n              onBlur={(newContent) => this.handleUpdate(newContent)}\r\n              onChange={(newContent) => this.handleUpdate(newContent)}\r\n            />\r\n            {this.state.desc === \"\" && (\r\n              <p className=\"errorMsg errorHireWidth\">{this.state.descErr}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"skillWrap\">\r\n            <div className=\"addJdDescLabel\">Skills *</div>\r\n            {this.state.skills ? (\r\n              <div>\r\n                <div>\r\n                  <Autocomplete\r\n                    placeholder=\"Skills\"\r\n                    multiple\r\n                    className=\"multiSelectContainer skillsAuto\"\r\n                    onKeyDown={this.handleMutilpleSkills}\r\n                    renderTags={(value, getTagProps) =>\r\n                      this.renderValues(value, getTagProps)\r\n                    }\r\n                    options={\r\n                      (JobDataReducer &&\r\n                        JobDataReducer.skillData &&\r\n                        JobDataReducer.skillData.data &&\r\n                        JobDataReducer.skillData.data.map((x, i) => ({\r\n                          value: i,\r\n                          label: x,\r\n                        }))) ||\r\n                      []\r\n                    }\r\n                  />\r\n\r\n                  {!this.state.multipleInputVal && (\r\n                    <p className=\"errorMsg\">{this.state.skillErr}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"addJdHireExpWrap\">\r\n            <div className=\"addJdExpWrap\">\r\n              <div className=\"addJdDescLabel\">Experience Required *</div>\r\n              <div style={{ display: \"flex\" }}>\r\n                <div className=\"div-1\">\r\n                  {\" \"}\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"experienceFrom\"\r\n                    className=\"addJdExpFromInput\"\r\n                    onChange={this.handleExperienceFrom}\r\n                    placeholder=\"0\"\r\n                    min=\"0\"\r\n                    value={this.state.experienceFrom}\r\n                  />{\" \"}\r\n                </div>\r\n                <div className=\"div-2\">To</div>\r\n                <div className=\"div-3\">\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    name=\"experienceTo\"\r\n                    className=\"addJdExpToInput\"\r\n                    onChange={this.handleExperienceTo}\r\n                    placeholder=\"0\"\r\n                    value={this.state.experienceTo}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {parseInt(this.state.experienceTo) <\r\n              parseInt(this.state.experienceFrom) ? (\r\n                <div style={{ color: \"red\", fontSize: \"11px\" }}>\r\n                  {\" \"}\r\n                  Experience To should be greater or equal to Experience From\r\n                </div>\r\n              ) : null}\r\n              <div style={{ display: \"flex\" }}>\r\n                {this.state.experienceFrom === \"\" ? (\r\n                  <p className=\"errorMsg errorExpWidth\">\r\n                    {this.state.expfroErr}\r\n                  </p>\r\n                ) : Number(this.state.experienceFrom) > 40 ? (\r\n                  <p className=\"errorMsg errorExpWidth\">\r\n                    Experience should not exceed 40\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                {this.state.experienceTo === \"\" ? (\r\n                  <p className=\"errorMsg errorExpWidth\">\r\n                    {this.state.expToErr}\r\n                  </p>\r\n                ) : Number(this.state.experienceTo) > 40 ? (\r\n                  <p className=\"errorMsg errorExpWidth\">\r\n                    Experience should not exceed 40\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"addJdHireWrap\">\r\n              <div className=\"addJdDescLabel\">No.of Hire *</div>\r\n              <input\r\n                type=\"number\"\r\n                name=\"noOfHire\"\r\n                className=\"addJdHireInput\"\r\n                onChange={this.handleNoOfHire}\r\n                placeholder=\"Enter No.of Hire\"\r\n                value={this.state.noOfHire}\r\n                min=\"0\"\r\n              />\r\n              {!this.state.noOfHire && (\r\n                <p className=\"errorMsg errorHireWidth\">{this.state.hireErr}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"addJdHireExpWrap\">\r\n            <div className=\"addJdHireWrap\">\r\n              <div className=\"addJdDescLabel\">Start Date*</div>\r\n              <DatePicker\r\n                className=\"jdDatepicker\"\r\n                label=\"\"\r\n                format=\"dd - MMM - yyyy\"\r\n                name=\"datepicker\"\r\n                isNoPast={true}\r\n                value={this.state.newStartDate}\r\n                onChange={(date) =>\r\n                  this.setState({\r\n                    newStartDate: date,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"to-div\">To</div>\r\n            <div className=\"addJdHireWrap\">\r\n              <div className=\"addJdDescLabel\">End Date*</div>\r\n\r\n              <DatePicker\r\n                label=\"\"\r\n                format=\"dd - MMM - yyyy\"\r\n                name=\"datepicker\"\r\n                isNoPast={true}\r\n                value={this.state.newEndDate}\r\n                onChange={(date) =>\r\n                  this.setState({\r\n                    newEndDate: date,\r\n                  })\r\n                }\r\n                minDate={this.state.newStartDate}\r\n              />\r\n\r\n              <p className=\"errorMsg errorExpWidth\">{this.state.endDateErr}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"addJdButtonWrap\" onClick={this.addJD}>\r\n            <Button className=\"addJdButton\">Submit</Button>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    FeatureReducer: state.FeatureReducer,\r\n    JobDescriptionReducer: state.JobDescriptionReducer,\r\n    JobDataReducer: state.JobDataReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    FeatureAction: bindActionCreators(Actions, dispatch),\r\n    JDAction: bindActionCreators(JDActions, dispatch),\r\n    JobDataAction: bindActionCreators(JobDataActions, dispatch),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(AddJD));\r\n","import * as React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\n\r\nexport default function AutocompleteComp(props) {\r\n\r\n  return (\r\n    <Autocomplete\r\n      multiple={props.multiple}\r\n      renderTags={props.renderTags}\r\n      className={`${props.className}`}\r\n      onChange={props.onChange}\r\n      id=\"free-solo-demo\"\r\n    size=\"small\"\r\n      freeSolo\r\n      disableClearable\r\n      value={props.value}\r\n      onKeyPress={props.onKeyPress}\r\n      options={props.options.map((x) => x.label)}\r\n      onBlur={props.onKeyDown}\r\n      defaultValue={props.defaultValue}\r\n      renderInput={(params) => (\r\n        <TextField\r\n\r\n        placeholder={props.placeholder ? props.placeholder : \"\"}\r\n          {...params}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            type: \"search\",\r\n            disableUnderline:true\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { InputLabel, FormControl, TextField } from \"@material-ui/core\";\r\nimport \"./CustomizedInputs.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    fontFamily: \"Poppins\",\r\n  },\r\n  input: {\r\n    \"&::placeholder\": {\r\n      textOverflow: \"ellipsis !important\",\r\n      color: \"#363636\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction CustomizedInputs(props) {\r\n  const classes = useStyles();\r\n\r\n  let icon = null;\r\n  if (props.inputIcon) {\r\n    icon = (\r\n      <img\r\n        src={props.inputIcon}\r\n        height={props.imageHeight}\r\n        width={props.imageWidth}\r\n        style={{ paddingLeft: \"10px\", marginRight: \"-1px\" }}\r\n        role=\"button\"\r\n        onClick={props.imageOnClick}\r\n      />\r\n    );\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n      <div style={{width:'100%'}}>\r\n       {\r\n         props.labelName ?  <InputLabel\r\n         htmlFor=\"bootstrap-input\"\r\n         className={\r\n           props.noMargin\r\n             ? \"text-black ml-2 mb-2\"\r\n             : \"text-black ml-2 mb-2 \"\r\n         }\r\n         style={{ fontFamily: \"Poppins\", color: \"#162855\" }}\r\n       >\r\n         {props.required ? `${props.labelName} *` : props.labelName}\r\n       </InputLabel> : null\r\n       }\r\n        <FormControl\r\n          className={classes.margin}\r\n          style={props.deviceAddInput ? { width: \"88%\" } : { width: \"100%\" }}\r\n          error={props.error}\r\n        >\r\n          <TextField\r\n          // className=\"new-input\"\r\n            id=\"bootstrap-input\"\r\n            name={props.name ? props.name : \"\"}\r\n            placeholder={props.placeholder}\r\n            onChange={props.onChange}\r\n            type={props.type ? props.type : \"text\"}\r\n            style={{ font: \"normal normal normal 14px/21px Poppins\",height:'34px' }}\r\n            className={`${props.className} input-fields`}\r\n            size={props.size ? props.size : \"small\"}\r\n            error={props.error}\r\n            required={props.required}\r\n            inputProps={{\r\n              maxLength: props.inputProps ? props.inputProps : 200,\r\n        \r\n              \r\n            }}\r\n            helperText={props.helperText}\r\n            InputProps={{\r\n              className: classes.textInput,\r\n              startAdornment: icon,\r\n            }}\r\n            // InputProps={{\r\n             \r\n            // }}\r\n            value={props.value}\r\n            variant=\"outlined\"\r\n            height='34px'\r\n            disabled={props.disabled}\r\n            onBlur={props.onKeyDown}\r\n            onKeyPress={(e) => {\r\n              e.key === \"Enter\" && e.preventDefault();\r\n            }}\r\n          />\r\n        </FormControl>\r\n      </div>\r\n \r\n  );\r\n}\r\n\r\nexport default CustomizedInputs;\r\n","import \"date-fns\";\r\nimport React from \"react\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport './styleCalender.css';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport 'react-date-range/dist/styles.css'; // main css file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\n\r\nexport default function MaterialUIPickers(props) {\r\n  const selectionRange = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    key: 'selection',\r\n  }\r\n  return (\r\n    // <DateRangePicker\r\n    //     ranges={[selectionRange]}\r\n    //     onChange={{}}\r\n    //   />\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <KeyboardDatePicker\r\n        className={props.className ? props.className : \"datepickerdate\"}\r\n        margin=\"normal\"\r\n        disablePast={props.isNoPast ? true : false}\r\n        id=\"date-picker-dialog\"\r\n        label={props.label}\r\n        format={props.format}\r\n        value={props.value}\r\n        name={props.name}\r\n        onChange={props.onChange}\r\n        KeyboardButtonProps={{\r\n          \"aria-label\": \"change date\",\r\n        }}\r\n        minDate={props.minDate}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n"],"sourceRoot":""}