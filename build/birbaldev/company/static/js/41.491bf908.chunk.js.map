{"version":3,"sources":["containers/Questions/CreateIt.js","containers/Questions/SelectIt.js","components/Atoms/SelectInput/SelectInput.js","components/Atoms/CustomizedInputs/CustomizedInputs.js","assets/images/backIcon.svg"],"names":["Create","props","handleSearch","e","setState","value","target","handleTimer","timer","handleAdd","state","candid","localStorage","getItem","payload","uniqueId","userID","QuestionText","Questiontimer","isDeleted","QuestionCreateAction","addQuestionData","deleteQuestion","item","confirmClicked","questionList","this","data","filter","isSelected","className","rows","cols","onChange","style","paddingTop","placeholder","type","marginLeft","Button","disabled","onClick","React","Component","connect","QuestionCreateReducer","dispatch","bindActionCreators","QuestionCreateActions","withRouter","dropdonVal","JSON","parse","TabPanel","children","index","other","role","hidden","id","aria-labelledby","Box","sx","p","Typography","Select","select","create","job","number","selectedQuestions","newquestionList","jobtitle","optid","optname","label","quesTextvalue","handleChange","event","newValue","getSelectedQuestions","JobDescriptionAction","getJobDescriptionById","qList","unique","Map","map","values","forEach","handleJd","jdErr","setItem","stringify","handleQuestiontimeSelect","handleQuestionSelect","a","newcurrentlist","newlistquestion","it","_id","push","questionSelected","currentlist","item2","questionSelectedList","AddQuestion","list","sendquestionData","quesLen","totalTime","noQuestion","questions","x","updateJobDescriptionData","newlist","quesCount","q","ReactGA","pageview","window","location","pathname","getQuestionData","getJobDescriptionData","prevProps","prev","cur","isQuestionAdded","optionsdata","JobDescriptionReducer","jobDescriptions","d","title","minExperience","maxExperience","quesSelected","qt","length","element","Number","height","Card","CardContent","padding","Tabs","aria-label","width","TabIndicatorProps","display","Tab","sendData","paddingBottom","key","flexDirection","justifyContent","SelectInput","options","borderRadius","fontWeight","fontSize","overflow","nextProps","currentState","isGetQuestionData","questionCreates","newQues","sort","b","createdAt","getJobDescriptionByIdData","code","jd","quesData","selectedIds","newList","includes","selected","newList2","concat","Actions1","CaretDownIcon","color","iconWhite","customStyles","control","base","minHeight","maxHeight","background","singleValue","provided","opacity","isDisabled","transition","styles","option","components","DropdownIndicator","classNamePrefix","menuPortalTarget","document","body","menuPlacement","placement","useStyles","makeStyles","theme","root","flexWrap","fontFamily","input","textOverflow","CustomizedInputs","classes","icon","inputIcon","src","imageHeight","imageWidth","paddingLeft","marginRight","imageOnClick","labelName","htmlFor","noMargin","required","margin","deviceAddInput","error","name","font","size","maxLength","inputProps","helperText","textInput","startAdornment","onKeyDown","preventDefault","module","exports"],"mappings":"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","file":"static/js/41.491bf908.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Button from \"../../components/Controls/Button/Button\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport CustomizedInputs from \"../../components/Atoms/CustomizedInputs/CustomizedInputs\";\r\nimport \"./ques.css\";\r\nimport * as QuestionCreateActions from \"../../store/QuestionCreate/QuestionCreateAction\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Create extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      timer: \"\",\r\n    };\r\n  }\r\n  handleSearch = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n  handleTimer = (e) => {\r\n    this.setState({ timer: e.target.value });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { value, timer } = this.state;\r\n    const candid = localStorage.getItem(\"id\");\r\n    const candemail = localStorage.getItem(\"email\");\r\n    const uniqueID = candemail + candid;\r\n    const payload = {\r\n      uniqueId: uniqueID,\r\n      userID: candid,\r\n      QuestionText: value,\r\n      Questiontimer: timer,\r\n      isDeleted: false,\r\n    };\r\n    this.props.QuestionCreateAction.addQuestionData(payload);\r\n    this.setState({\r\n      value: \"\",\r\n      timer: \"\",\r\n    });\r\n  };\r\n\r\n  deleteQuestion = (item) => {\r\n    this.props.deleteQuestion(item);\r\n  };\r\n\r\n  confirmClicked = (questionList) => {};\r\n\r\n  render() {\r\n    let questionList = this.props.data.filter((item) => item.isSelected);\r\n    return (\r\n      // <div className=\"create-main\">\r\n      <div className=\"ques-create-qstn-wrapper\">\r\n        <div className=\"ques-create-ques\">Create the Question by yourself</div>\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"100\"\r\n          className=\"ques-box-text\"\r\n          onChange={(e) => {\r\n            this.handleSearch(e);\r\n          }}\r\n          value={this.state.value}\r\n        />\r\n        <div className=\"ques-create-ques\" style={{ paddingTop: \"8px\" }}>\r\n          Timer\r\n        </div>\r\n        <div>\r\n          <input\r\n            className=\"ques-time-box\"\r\n            placeholder=\"Enter Time\"\r\n            type=\"number\"\r\n            value={this.state.timer}\r\n            onChange={(e) => {\r\n              this.handleTimer(e);\r\n            }}\r\n          />\r\n          <span style={{ marginLeft: \"7px\" }}>\r\n            <Button\r\n              className=\"ques-add-btn\"\r\n              disabled={this.state.value === \"\"}\r\n              onClick={this.handleAdd}\r\n            >\r\n              Add Question\r\n            </Button>\r\n          </span>\r\n        </div>\r\n        {/* </div> */}\r\n        {/* <Box className=\"boxstyling\">\r\n          <p className=\"create-q\">Create the Question by yourself </p>\r\n          <div className=\"ques-int\">\r\n            <div className=\"QuestionInput\" style={{ marginRight: \"25px\" }}>\r\n              <textarea\r\n                rows=\"4\"\r\n                cols=\"50\"\r\n                maxlength=\"500\"\r\n                placeholder=\"Write the Question?\"\r\n                style={{ padding: \"6px\", borderRadius: \"4px\" }}\r\n                onChange={(e) => {\r\n                  this.handleSearch(e);\r\n                }}\r\n                value={this.state.value}\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"QuestionInput\" style={{ marginRight: \"25px\" }}>\r\n              <CustomizedInputs\r\n                style={{ borderRadius: \"4px\" }}\r\n                imageHeight=\"20px\"\r\n                imageWidth=\"auto\"\r\n                type=\"number\"\r\n                placeholder=\"Enter Time for this question\"\r\n                value={this.state.timer}\r\n                onChange={(e) => {\r\n                  this.handleTimer(e);\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              width=\"140px\"\r\n              height=\"47px\"\r\n              disabled={this.state.value === \"\"}\r\n              onClick={this.handleAdd}\r\n              borderRadius=\"4px\"\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n        </Box> */}\r\n        {/* <div className=\"create-style\">\r\n          <div className=\"col-8\">\r\n            {questionList.map((item, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <div className=\"question-block\">\r\n                    <div className=\"createcardstyle\">\r\n                      <div>{item.QuestionText}</div>\r\n                      <DeleteIcon onClick={() => this.deleteQuestion(item)} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    QuestionCreateReducer: state.QuestionCreateReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    QuestionCreateAction: bindActionCreators(QuestionCreateActions, dispatch),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Create));\r\n","import React from \"react\";\r\nimport SelectInput from \"../../components/Atoms/SelectInput/SelectInput\";\r\nimport CustomizedInputs from \"../../components/Atoms/CustomizedInputs/CustomizedInputs\";\r\nimport Button from \"../../components/Controls/Button/Button\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport \"./ques.css\";\r\nimport Create from \"./CreateIt\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Actions from \"../../store/Question/QuestionAction\";\r\nimport * as QuestionCreateActions from \"../../store/QuestionCreate/QuestionCreateAction\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport backIcon from \"../../assets/images/backIcon.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Actions1 from \"../../store/JobDescription/JobDescriptionAction\";\r\nimport TouchAppIcon from \"@material-ui/icons/TouchApp\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ReactGA from \"react-ga\";\r\nconst dropdonVal = JSON.parse(localStorage.getItem(\"dropdown\"));\r\nconst TabPanel = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role='tabpanel'\r\n      hidden={value !== index}\r\n      id={`vertical-tabpanel-${index}`}\r\n      aria-labelledby={`vertical-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nclass Select extends React.Component {\r\n  state = {\r\n    select: true,\r\n    create: false,\r\n    value: \"\",\r\n    job: \"\",\r\n    number: \"\",\r\n    timer: \"\",\r\n    selectedQuestions: [],\r\n    questionList: [],\r\n    newquestionList: [],\r\n    jobtitle: [],\r\n    optid: dropdonVal && dropdonVal.value,\r\n    optname: dropdonVal && dropdonVal.label,\r\n    value: 0,\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    this.setState({ quesTextvalue: e.target.value });\r\n  };\r\n\r\n  handleTimer = (e) => {\r\n    this.setState({ timer: e.target.value });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { quesTextvalue, timer } = this.state;\r\n    const candid = localStorage.getItem(\"id\");\r\n    const candemail = localStorage.getItem(\"email\");\r\n    const uniqueID = candemail + candid;\r\n    const payload = {\r\n      uniqueId: uniqueID,\r\n      userID: candid,\r\n      QuestionText: quesTextvalue,\r\n      Questiontimer: timer,\r\n      isDeleted: false,\r\n    };\r\n    this.props.QuestionCreateAction.addQuestionData(payload);\r\n    this.setState({\r\n      quesTextvalue: \"\",\r\n      timer: \"\",\r\n    });\r\n  };\r\n\r\n  handleChange = (event, newValue) => {\r\n    this.setState({ value: newValue });\r\n  };\r\n  componentDidMount() {\r\n    ReactGA.pageview(window.location.pathname);\r\n    this.props.QuestionCreateAction.getQuestionData();\r\n    this.props.JobDescriptionAction.getJobDescriptionData();\r\n    if (this.state.optid) {\r\n      const payload = {\r\n        id: this.state.optid,\r\n      };\r\n      this.props.JobDescriptionAction.getJobDescriptionById(payload);\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    const prev = prevProps && prevProps.QuestionCreateReducer;\r\n    const cur = this.props && this.props.QuestionCreateReducer;\r\n    if (prev.isQuestionAdded !== cur.isQuestionAdded) {\r\n      this.props.QuestionCreateAction.getQuestionData();\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, currentState) {\r\n    if (\r\n      nextProps &&\r\n      nextProps.QuestionCreateReducer &&\r\n      nextProps.QuestionCreateReducer.getQuestionData &&\r\n      nextProps.QuestionCreateReducer.getQuestionData.data &&\r\n      nextProps.QuestionCreateReducer.isGetQuestionData &&\r\n      nextProps.QuestionCreateReducer.getQuestionData.data.questionCreates\r\n    ) {\r\n      nextProps.QuestionCreateReducer.isGetQuestionData = false;\r\n      let questionList = [];\r\n      nextProps.QuestionCreateReducer.getQuestionData.data.questionCreates.map(\r\n        (item) => {\r\n          questionList.push({ ...item, isSelected: false });\r\n        }\r\n      );\r\n      let newQues = questionList.sort(function (a, b) {\r\n        return a.createdAt < b.createdAt\r\n          ? 1\r\n          : a.createdAt > b.createdAt\r\n          ? -1\r\n          : 0;\r\n      });\r\n      let unique = [\r\n        ...new Map(newQues.map((item) => [item[\"_id\"], item])).values(),\r\n      ];\r\n      currentState.questionList = unique;\r\n    }\r\n\r\n    if (\r\n      nextProps &&\r\n      nextProps.JobDescriptionReducer &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.code ==\r\n        200 &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd\r\n        .questions &&\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd\r\n        .questions.length > 0\r\n    ) {\r\n      let quesLength = \"\",\r\n        quesTimer = \"\",\r\n        quesData = [];\r\n      quesLength =\r\n        nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd\r\n          .questions.length;\r\n      quesTimer =\r\n        nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd.timer;\r\n\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.jd.questions.map(\r\n        (item) => {\r\n          quesData.push({ ...item, isSelected: true });\r\n        }\r\n      );\r\n      let unique = [\r\n        ...new Map(quesData.map((item) => [item[\"_id\"], item])).values(),\r\n      ];\r\n      quesData = unique;\r\n      let selectedIds = quesData.map((item) => item._id);\r\n      // quesData.forEach((ques, idx) => {\r\n      //   currentState.questionList.push({ ...ques });\r\n      // });\r\n      let newList = currentState.questionList;\r\n      newList.map((item2) => {\r\n        if (selectedIds.includes(item2._id)) {\r\n          item2.isSelected = true;\r\n        }\r\n      });\r\n      let selected = newList.filter((item) => item.isSelected == true);\r\n      let notSelected = newList.filter((item2) => item2.isSelected == false);\r\n      let newList2 = notSelected.concat(selected);\r\n      currentState.questionList = newList2;\r\n      nextProps.JobDescriptionReducer.getJobDescriptionByIdData.data.code = 0;\r\n    }\r\n    return currentState;\r\n  }\r\n\r\n  getSelectedQuestions = (e) => {\r\n    const payload = {\r\n      id: e.value,\r\n    };\r\n    this.props.JobDescriptionAction.getJobDescriptionById(payload);\r\n    let qList = this.state.questionList;\r\n    let unique = [\r\n      ...new Map(qList.map((item) => [item[\"_id\"], item])).values(),\r\n    ];\r\n    qList = unique;\r\n    qList.forEach((item) => (item.isSelected = false));\r\n    this.setState(\r\n      {\r\n        questionList: unique,\r\n      },\r\n      () => null\r\n    );\r\n  };\r\n\r\n  handleJd = (e) => {\r\n    this.setState({ job: e, jdErr: false });\r\n    this.setState({ optid: e.value, optname: e.label });\r\n    const payload = {\r\n      value: e.value,\r\n      label: e.label,\r\n    };\r\n    localStorage.setItem(\"dropdown\", JSON.stringify(payload));\r\n    this.getSelectedQuestions(e);\r\n  };\r\n\r\n  handleQuestiontimeSelect = (e) => {};\r\n\r\n  handleTimer = (e) => {\r\n    this.setState({ timer: e.value });\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    this.setState({ value: e.value });\r\n  };\r\n  handleQuestionSelect = async (item) => {\r\n    let newcurrentlist = this.state.questionList;\r\n    let unique = [\r\n      ...new Map(newcurrentlist.map((item) => [item[\"_id\"], item])).values(),\r\n    ];\r\n    newcurrentlist = unique;\r\n    let newlistquestion = [];\r\n\r\n    newcurrentlist.map((it) => {\r\n      if (it._id === item._id) {\r\n        newlistquestion.push({ ...item, isSelected: false });\r\n      } else {\r\n        newlistquestion.push(it);\r\n      }\r\n    });\r\n\r\n    await this.setState({ questionList: newlistquestion });\r\n  };\r\n\r\n  Select = () => {\r\n    this.setState({ select: true, create: false });\r\n  };\r\n\r\n  Create = () => {\r\n    this.setState({ select: false, create: true });\r\n  };\r\n\r\n  questionSelected = async (item) => {\r\n    let currentlist = this.state.questionList;\r\n    // let newlist = [];\r\n    // let Selected = [];\r\n    // let unique = [\r\n    //   ...new Map(currentlist.map((item) => [item[\"_id\"], item])).values(),\r\n    // ];\r\n    // currentlist = unique;\r\n    // currentlist.map((it) => {\r\n    //   if (it._id == item._id) {\r\n    //     newlist.push({ ...item, isSelected: true });\r\n    //   } else {\r\n    //     newlist.push(it);\r\n    //   }\r\n    // });\r\n\r\n    currentlist.map((item2) => {\r\n      if (item2._id == item._id) {\r\n        item2.isSelected = true;\r\n      }\r\n    });\r\n\r\n    this.setState({ questionList: currentlist });\r\n    //   Selected = newlist.filter((item) => {\r\n    //     return item.isSelected == true;\r\n    //   });\r\n\r\n    //  await this.setState({ newquestionList: Selected });\r\n  };\r\n\r\n  questionSelectedList = (item) => {\r\n    let newcurrentlist = this.state.questionList;\r\n    let newlistquestion = [];\r\n    let unique = [\r\n      ...new Map(newcurrentlist.map((item) => [item[\"_id\"], item])).values(),\r\n    ];\r\n    newcurrentlist = unique;\r\n    newcurrentlist.map((it) => {\r\n      if (JSON.stringify(it) === JSON.stringify(item)) {\r\n        newlistquestion.push({ ...item, isSelected: true });\r\n      } else {\r\n        newlistquestion.push(it);\r\n      }\r\n    });\r\n\r\n    this.setState({ newquestionList: newlistquestion });\r\n  };\r\n\r\n  AddQuestion = (value) => {\r\n    let list = this.state.questionList;\r\n    let unique = [...new Map(list.map((item) => [item[\"_id\"], item])).values()];\r\n    list = unique;\r\n    list.push({\r\n      QuestionText: value,\r\n      isSelected: true,\r\n    });\r\n    this.setState({\r\n      questionList: list,\r\n    });\r\n  };\r\n  sendquestionData = (quesLen, totalTime) => {\r\n    const { number, timer, newquestionList, optid } = this.state;\r\n\r\n    const payload = {\r\n      id: optid,\r\n      noQuestion: quesLen,\r\n      timer: totalTime,\r\n      questions: this.state.questionList.filter((x) => x.isSelected),\r\n    };\r\n    this.props.JobDescriptionAction.updateJobDescriptionData(payload);\r\n  };\r\n\r\n  deleteQuestion = (item) => {\r\n    let currentlist = this.state.questionList;\r\n    let newlist = [];\r\n    currentlist.map((it) => {\r\n      if (JSON.stringify(it) === JSON.stringify(item)) {\r\n        newlist.push({ ...item, isSelected: false });\r\n      } else {\r\n        newlist.push(it);\r\n      }\r\n    });\r\n    this.setState({ questionList: newlist });\r\n  };\r\n  quesCount = (q) => {};\r\n\r\n  render() {\r\n    let optionsdata = [];\r\n    let dropdownData = [];\r\n    if (\r\n      this.props &&\r\n      this.props.JobDescriptionReducer &&\r\n      this.props.JobDescriptionReducer.getJobDescriptionData &&\r\n      this.props.JobDescriptionReducer.getJobDescriptionData.data &&\r\n      this.props.JobDescriptionReducer.getJobDescriptionData.data\r\n        .jobDescriptions\r\n    ) {\r\n      dropdownData =\r\n        this.props.JobDescriptionReducer.getJobDescriptionData.data\r\n          .jobDescriptions;\r\n      optionsdata = dropdownData.map((d) => ({\r\n        value: d._id,\r\n        label:\r\n          \" \" +\r\n          (d.title && d.title.jobtitle) +\r\n          \" - \" +\r\n          d.minExperience +\r\n          \" to \" +\r\n          d.maxExperience +\r\n          \" Years of experience\",\r\n      }));\r\n    }\r\n\r\n    let { questionList, newquestionList } = this.state;\r\n    let quesSelected = [];\r\n    let totalTime = 0;\r\n    questionList.map((item) => {\r\n      if (item.isSelected === true) {\r\n        quesSelected.push({\r\n          QuestionText: item.QuestionText,\r\n          Questiontimer: item.Questiontimer,\r\n        });\r\n      }\r\n    });\r\n\r\n    let qt = 0;\r\n    let quesLen = quesSelected.length;\r\n    quesSelected.forEach((element) => {\r\n      qt = Number(element.Questiontimer);\r\n      totalTime += qt;\r\n    });\r\n\r\n    return (\r\n      <div className='container-fluid pt-4' style={{ height: \"100%\" }}>\r\n        <Card className='card-body'>\r\n          <CardContent\r\n            style={{\r\n              height: \"100%\",\r\n              padding: \"0px\",\r\n              // overflow: \"auto\"\r\n            }}\r\n          >\r\n            {/* <Box\r\n              sx={{\r\n                flexGrow: 1,\r\n                bgcolor: \"background.paper\",\r\n                display: \"flex\",\r\n                height: 224,\r\n              }}\r\n            > */}\r\n            <Tabs\r\n              // orientation=\"vertical\"\r\n              // variant=\"scrollable\"\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n              aria-label='Vertical tabs example'\r\n              // sx={{ borderRight: 1, borderColor: \"divider\" }}\r\n              // style={{ width: \"20%\" }}\r\n              style={{ width: \"100%\" }}\r\n              TabIndicatorProps={{\r\n                style: {\r\n                  display: \"none\",\r\n                },\r\n              }}\r\n            >\r\n              <Tab\r\n                // icon={<TouchAppIcon />}\r\n                className='ques-tab'\r\n                label='Select Questions'\r\n              />\r\n              <Tab\r\n                // icon={<EditIcon />}\r\n                className='ques-tab'\r\n                label='Create Question'\r\n              />\r\n            </Tabs>\r\n            <TabPanel\r\n              value={this.state.value}\r\n              style={{ width: \"100%\" }}\r\n              index={1}\r\n            >\r\n              <Create\r\n                data={questionList || []}\r\n                sendData={this.AddQuestion}\r\n                deleteQuestion={this.deleteQuestion}\r\n              />\r\n              {/* <div className=\"ques-create-qstn-wrapper\">\r\n                <div className=\"ques-create-ques\">\r\n                  Create the Question by yourself\r\n                </div>\r\n                <textarea\r\n                  rows=\"4\"\r\n                  cols=\"100\"\r\n                  className=\"ques-box-text\"\r\n                  onChange={(e) => {\r\n                    this.handleSearch(e);\r\n                  }}\r\n                  value={this.state.quesTextvalue}\r\n                />\r\n                <div className=\"ques-create-ques\" style={{ paddingTop: \"8px\" }}>\r\n                  Timer\r\n                </div>\r\n                <div>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={this.state.timer}\r\n                    onChange={(e) => {\r\n                      this.handleTimer(e);\r\n                    }}\r\n                  />\r\n                  <span style={{ marginLeft: \"7px\" }}>\r\n                    <Button\r\n                      className=\"ques-add-btn\"\r\n                      disabled={this.state.value === \"\"}\r\n                      onClick={this.handleAdd}\r\n                    >\r\n                      Add Question\r\n                    </Button>\r\n                  </span>\r\n                </div>\r\n              </div> */}\r\n              <hr />\r\n              <div className='ques-create-qstn-list'>\r\n                <div\r\n                  className='ques-create-ques'\r\n                  style={{ paddingTop: \"6px\", paddingBottom: \"10px\" }}\r\n                >\r\n                  Questions\r\n                </div>\r\n                {questionList.map((item, index) => {\r\n                  return (\r\n                    <div>\r\n                      <div\r\n                        key={index}\r\n                        className='card1style'\r\n                        // className={\r\n                        //   item.isSelected === true\r\n                        //     ? \"card1style2\"\r\n                        //     : \"card1style\"\r\n                        // }\r\n                      >\r\n                        <div>{item.QuestionText}</div>\r\n                        <div>{item.Questiontimer}Min</div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </TabPanel>\r\n            <TabPanel\r\n              value={this.state.value}\r\n              style={{ width: \"100%\" }}\r\n              index={0}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  justifyContent: \"space-between\",\r\n                  width: \"100%\",\r\n                  padding: \"24px 20px 12px\",\r\n                }}\r\n              >\r\n                <div className='ques-jd-wrapper'>\r\n                  <div className='ques-jd-text'>Job Description</div>\r\n                  <div className='select-drop select-drop-1'>\r\n                    <SelectInput\r\n                      className='react-select project'\r\n                      onChange={this.handleJd}\r\n                      options={optionsdata}\r\n                      value={{\r\n                        value: this.state.optid,\r\n                        label: this.state.optname,\r\n                      }}\r\n                      placeholder={\r\n                        this.state.optname\r\n                          ? this.state.optname\r\n                          : \"Select Job Description\"\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div className='ques-num-of-ques-box'>\r\n                    <p className='ques'>\r\n                      <strong> No of Questions</strong>\r\n                    </p>\r\n                    <span className='ques-ques-number'>\r\n                      {\" \"}\r\n                      {\"0\"}\r\n                      {quesLen}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div\r\n                    className='ques-num-of-ques-box'\r\n                    style={{ marginLeft: \"11px\" }}\r\n                  >\r\n                    <p className='timer'>\r\n                      <strong>Timer</strong>\r\n                    </p>\r\n                    <span className='ques-ques-number'> {totalTime} Min</span>\r\n                  </div>\r\n                </div>\r\n                <div className='confirm-button'>\r\n                  <Button\r\n                    width='200px'\r\n                    height='34px'\r\n                    borderRadius='4px'\r\n                    fontWeight='700'\r\n                    fontSize='13px'\r\n                    onClick={() => this.sendquestionData(quesLen, totalTime)}\r\n                  >\r\n                    Confirm\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <hr />\r\n              {this.state.select && (\r\n                <div\r\n                  className='carddisplay card-right'\r\n                  style={{ overflow: \"auto\" }}\r\n                >\r\n                  <div className='ques-select-qstn'>\r\n                    <div className='ques-btn-row'> Questions</div>\r\n                    {questionList.map((item, index) => {\r\n                      return (\r\n                        <div\r\n                          key={index}\r\n                          onClick={() => this.questionSelected(item)}\r\n                          className={\r\n                            item.isSelected === true\r\n                              ? \"card1style2\"\r\n                              : \"card1style\"\r\n                          }\r\n                        >\r\n                          <div>{item.QuestionText}</div>\r\n                          <div>{item.Questiontimer}Min</div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n\r\n                  <div className='ques-select-qstn'>\r\n                    <div className='ques-btn-row'>Selected Questions</div>\r\n\r\n                    {questionList.map((item, index) => {\r\n                      return (\r\n                        <div>\r\n                          {item.isSelected === true ? (\r\n                            <div\r\n                              onClick={(e) => this.handleQuestionSelect(item)}\r\n                              className='card1style2'\r\n                            >\r\n                              {item.QuestionText}\r\n                              <div>{item.Questiontimer}Min</div>\r\n                            </div>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </TabPanel>\r\n            {/* </Box> */}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    QuestionCreateReducer: state.QuestionCreateReducer,\r\n    JobDescriptionReducer: state.JobDescriptionReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    QuestionCreateAction: bindActionCreators(QuestionCreateActions, dispatch),\r\n    JobDescriptionAction: bindActionCreators(Actions1, dispatch),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Select);\r\n","import React from \"react\";\r\nimport \"./selectInput.scss\";\r\nimport Select, { components } from \"react-select\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\n\r\nexport default function SelectInput(props) {\r\n  const CaretDownIcon = () => {\r\n    return (\r\n      <ArrowDropDownIcon\r\n        style={{ color: !props.iconWhite ? \"#333\" : \"#fff\" }}\r\n      />\r\n    );\r\n  };\r\n  const DropdownIndicator = (props) => {\r\n    return (\r\n      <components.DropdownIndicator {...props}>\r\n        <CaretDownIcon />\r\n      </components.DropdownIndicator>\r\n    );\r\n  };\r\n  const customStyles = {\r\n    control: (base) => ({\r\n      ...base,\r\n      height: props.height ? props.height : 34,\r\n      minHeight: props.minHeight ? props.minHeight : 34,\r\n      maxHeight: props.maxHeight ? props.maxHeight : 34,\r\n      padding: props.padding ? props.padding : 0,\r\n      borderRadius: 4,\r\n      fontSize: props.fontSize ? props.fontSize : 11,\r\n      color: props.color ? props.color : \"#000\",\r\n      background: props.background ? props.background : \"#fff\",\r\n      fontWeight: props.fontWeight ? props.fontWeight : \"400\",\r\n    }),\r\n    singleValue: (provided, state) => {\r\n      const opacity = state.isDisabled ? 0.5 : 1;\r\n      const transition = \"opacity 300ms\";\r\n\r\n      return { ...provided, opacity, transition };\r\n    },\r\n    placeholder: (styles) => ({\r\n      ...styles,\r\n      color: props.color ? props.color : \"#000\",\r\n      fontSize: props.fontSize ? props.fontSize : 11,\r\n      fontWeight: props.fontWeight ? props.fontWeight : \"400\",\r\n    }),\r\n    option: (styles, { data }) => {\r\n      const color = data.color ? data.color : \"#000\";\r\n      return {\r\n        ...styles,\r\n        color: color,\r\n      };\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      components={{ DropdownIndicator }}\r\n      classNamePrefix=\"select-state\"\r\n      className={props.className}\r\n      onChange={props.onChange}\r\n      options={props.options}\r\n      placeholder={props.placeholder}\r\n      value={props.value}\r\n      isDisabled={props.disabled}\r\n      styles={customStyles}\r\n      menuPortalTarget={document.body}\r\n      menuPlacement={props.placement ? props.placement : \"auto\"}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { InputLabel, FormControl, TextField } from \"@material-ui/core\";\r\nimport \"./CustomizedInputs.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    fontFamily: \"Poppins\",\r\n  },\r\n  input: {\r\n    \"&::placeholder\": {\r\n      textOverflow: \"ellipsis !important\",\r\n      color: \"#363636\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction CustomizedInputs(props) {\r\n  const classes = useStyles();\r\n\r\n  let icon = null;\r\n  if (props.inputIcon) {\r\n    icon = (\r\n      <img\r\n        src={props.inputIcon}\r\n        height={props.imageHeight}\r\n        width={props.imageWidth}\r\n        style={{ paddingLeft: \"10px\", marginRight: \"-1px\" }}\r\n        role=\"button\"\r\n        onClick={props.imageOnClick}\r\n      />\r\n    );\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n      <div style={{width:'100%'}}>\r\n       {\r\n         props.labelName ?  <InputLabel\r\n         htmlFor=\"bootstrap-input\"\r\n         className={\r\n           props.noMargin\r\n             ? \"text-black ml-2 mb-2\"\r\n             : \"text-black ml-2 mb-2 \"\r\n         }\r\n         style={{ fontFamily: \"Poppins\", color: \"#162855\" }}\r\n       >\r\n         {props.required ? `${props.labelName} *` : props.labelName}\r\n       </InputLabel> : null\r\n       }\r\n        <FormControl\r\n          className={classes.margin}\r\n          style={props.deviceAddInput ? { width: \"88%\" } : { width: \"100%\" }}\r\n          error={props.error}\r\n        >\r\n          <TextField\r\n          className=\"new-input\"\r\n            id=\"bootstrap-input\"\r\n            name={props.name ? props.name : \"\"}\r\n            placeholder={props.placeholder}\r\n            onChange={props.onChange}\r\n            type={props.type ? props.type : \"text\"}\r\n            style={{ font: \"normal normal normal 14px/21px Poppins\" }}\r\n            className={`${props.className} input-fields`}\r\n            size={props.size ? props.size : \"small\"}\r\n            error={props.error}\r\n            required={props.required}\r\n            inputProps={{\r\n              maxLength: props.inputProps ? props.inputProps : 200,\r\n        \r\n              \r\n            }}\r\n            helperText={props.helperText}\r\n            InputProps={{\r\n              className: classes.textInput,\r\n            }}\r\n            InputProps={{\r\n              startAdornment: icon,\r\n            }}\r\n            value={props.value}\r\n            variant=\"outlined\"\r\n            height='34px'\r\n            disabled={props.disabled}\r\n            onBlur={props.onKeyDown}\r\n            onKeyPress={(e) => {\r\n              e.key === \"Enter\" && e.preventDefault();\r\n            }}\r\n          />\r\n        </FormControl>\r\n      </div>\r\n \r\n  );\r\n}\r\n\r\nexport default CustomizedInputs;\r\n","module.exports = __webpack_public_path__ + \"static/media/backIcon.9ee4ce40.svg\";"],"sourceRoot":""}